# -*- coding: utf-8 -*-
"""ML INCLASS ACTIVITY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WBSoOhOQmnkZjeKbwmvBqvbTyxX-P_G1
"""

!pip install streamlit

import streamlit as st

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score

import pickle

df = pd.read_csv("Iris.csv")
df

df.describe()

df.info()

df.isna().sum()

X = df.drop(columns=["Species", "Id"])
Y = df["Species"]

Y.unique()

Y = LabelEncoder().fit_transform(Y)
Y

X_train, X_test, y_train, y_test = train_test_split(X,Y, test_size=0.3, random_state=82)

X_train

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

y_pred

y_pred_class = np.round(y_pred).astype(int)
# Rounds y_pred to nearest integer
#It is necessary to round off, because the targets are originally labels

y_pred_class

y_test

y_pred_class == y_test

#MSE
#R2-SCORE
#ACCURACY
print("Mean Square Error", mean_squared_error(y_pred, y_test))
print("R2_SCORE", r2_score(y_pred, y_test))
print("Accuracy", accuracy_score(y_pred_class, y_test))

with open("first_iris_model.pkl", "wb") as file:
    pickle.dump(model, file)

with open("first_iris_model.pkl", "rb") as file:
    loaded_model = pickle.load(file)

sample = np.array([[5.1, 3.5, 1.4, 0.2]])
prediction = loaded_model.predict(sample)

prediction

prediction.round().astype(int)

df.loc[5, "Species"]

df.iloc[5, 5]

# Load the model
with open("/content/first_iris_model.pkl", 'rb') as file:
    model= pickle.load(file)

# Streamlit UI

st.title('Iris Flower Prediction App')
st.write('This app predicts the **Iris Flower** type!')
st.write('Please input the followimg parameters:')

# Input form
sepal_ID = st.number_input('Sepal ID', min_value=0.1, max_value=10.0, value=5.4, step=0.1)
sepal_width = st.number_input('Sepal Width', min_value=0.1, max_value=10.0, value=3.4, step=0.1)
petal_length = st.number_input('Petal Length', min_value=0.1, max_value=10.0, value=1.3, step=0.1)
sepal_length = st.number_input('Sepal Length', min_value=0.1, max_value=10.0, value=0.2, step=0.1)
petal_width = st.number_input('Pepal Width', min_value=0.1, max_value=10.0, value=0.2, step=0.1)

# Prediction

if st.button('Predict'):
    user_input = np.array([sepal_ID, sepal_width, petal_length, sepal_length, petal_width])
    prediction = model.predic(user_input)
    species_mapping = {0: 'setosa', 1: 'versicolor', 2: 'virginica'}
    st.write(prediction)
    predicted_species = species_mapping.get(int(prediction[0]), 'unknown')
    st.write(f'The predicted species is: {predicted_species}')